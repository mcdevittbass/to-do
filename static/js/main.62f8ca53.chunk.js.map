{"version":3,"sources":["components/TaskModal.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["TaskModal","props","useState","visible","setModalOpen","newInput","setNewInput","closeModal","type","style","color","icon","PlusOutlined","size","onClick","onCancel","footer","span","Item","name","placeholder","id","onChange","e","target","value","htmlType","background","onSubmit","Main","todos","changeToDo","toggleText","setToggleText","showChecked","setShowChecked","checkedTodos","setCheckedTodos","Header","Layout","Content","className","justifyContent","bordered","width","textAlign","margin","checked","filter","todo","listStyleType","map","item","key","text","setCheckedValue","title","CloseOutlined","each","handleRemove","Date","getTime","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.62f8ca53.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Modal, Form, Input, Row, Col, Space, Button} from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\n\nconst TaskModal = (props) => {\n    const [visible, setModalOpen] = useState(false);\n    const [newInput, setNewInput] = useState(null);\n\n    const addTask = () => {\n        props.onSubmit(newInput);\n        closeModal();\n    }\n\n    const openModal = () => {\n        setNewInput(null);\n        setModalOpen(true);\n    }\n    const closeModal = () => {\n        setModalOpen(false);\n    }\n\n    return (\n        <>\n            <Button type='default' style={{color: '#5b8c00'}} icon={<PlusOutlined />} size={'small'} onClick={openModal}>Add task</Button>\n            <Modal \n                visible={visible}\n                onCancel={closeModal}\n                footer={null}>\n                    <Row>\n                        <Col span={20}>\n                            <Form>\n                                <Form.Item name='textInput'>\n                                    <Input placeholder='Task' id='task-input' name='item' onChange={e => setNewInput(e.target.value)} />\n                                </Form.Item>\n                                <Form.Item name='buttons'>\n                                    <Space>\n                                        <Button type=\"default\" style={{color: '#5b8c00'}} htmlType=\"cancel\" onClick={closeModal}>\n                                            Cancel\n                                        </Button>\n                                        <Button type=\"primary\" style={{background: '#5b8c00'}}htmlType=\"submit\" onClick={addTask}>\n                                            Add Task\n                                        </Button>\n                                    </Space>                          \n                                </Form.Item>\n                            </Form>\n                        </Col>\n                    </Row>\n            </Modal>\n        </>\n    )\n}\n\nexport default TaskModal;","import React, { useState } from 'react';\nimport { Checkbox, Layout, Card, Button, Row, Col, Switch, Tooltip} from 'antd';\nimport TaskModal from './TaskModal.js';\nimport { CloseOutlined } from '@ant-design/icons';\n\nconst Main = (props) => {\n    const [todos, changeToDo] = useState([]);\n    const [toggleText, setToggleText] = useState(\"Hide Completed Tasks\");\n    const [showChecked, setShowChecked] = useState(true);\n    const [checkedTodos, setCheckedTodos] = useState([]);\n\n    const { Header, Content } = Layout;\n    \n    const handleAdd = (todo) => {\n        let key = new Date().getTime();\n        changeToDo([...todos, {key: key, text: todo, checked: false}]);\n    }\n    const handleRemove = (item) => {\n        changeToDo(todos.filter(each => each.key !== item.key));\n    }\n    const switchDisplay = () => {\n        //changes state before update, so showChecked will evaluate to true, though we want it to be false in this case\n        if(showChecked === true) {\n            setCheckedTodos(todos.filter(todo => todo.checked === true));\n            changeToDo(todos.filter(todo => todo.checked === false));\n        } else {\n            changeToDo([...todos, ...checkedTodos]);\n            setCheckedTodos([]);\n        }\n        setShowChecked(!showChecked);\n        setToggleText(toggleText === \"Hide Completed Tasks\" ? \"Show Completed Tasks\" : \"Hide Completed Tasks\");\n    }\n\n    const setCheckedValue = (item) => {\n        let checked = item.checked === true ? false : true;\n        changeToDo(todos.map(todo => {\n            if(todo.key === item.key) {\n                return ({key: todo.key, text: todo.text, checked: checked});\n            } else {\n                return todo;\n            }\n        }));\n    }\n    \n    return (\n        <Layout className='layout'>\n            <Header>\n                <div className='head'>Your To Do List!</div>\n            </Header>\n            <Content>\n                <div className='content'>\n                    <Row style={{justifyContent: \"center\"}}>\n                        <Col>\n                            <div className=\"site-card-border-less-wrapper\">\n                                <Card bordered={false} style={{ width: 300 }} className='card'>\n                                    <div style={{textAlign: \"center\", margin: \"10px\"}} >\n                                        <p>{toggleText}</p>\n                                        <Switch checked={showChecked} onChange={switchDisplay} style={{background: '#5b8c00'}}>Hide checked</Switch>\n                                    </div>\n                                    <ul style={{listStyleType: 'none'}}>\n                                        {todos.map(item => {\n                                            return (\n                                                <li key={item.key}>\n                                                    <Checkbox className='ant-checkbox' checked={item.checked} onChange={() => setCheckedValue(item)}>\n                                                        {item.text}\n                                                        <Tooltip title='Remove list item'>\n                                                            <Button \n                                                                type='text' \n                                                                icon={<CloseOutlined style={{color: 'red'}} />} \n                                                                size='small' \n                                                                onClick={() => handleRemove(item)} />\n                                                        </Tooltip>\n                                                    </Checkbox>\n                                                    <br />                    \n                                                </li>\n                                            )}\n                                        )}\n                                    </ul>\n                                    <br />\n                                    <TaskModal onSubmit={handleAdd}/>\n                                </Card>\n                            </div>\n                        </Col>\n                    </Row>\n                </div>\n            </Content>\n        </Layout>\n    )\n}\n\nexport default Main;","import React from 'react';\nimport Main from './components/Main';\nimport { HashRouter } from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n  return (\n    <HashRouter>\n        <Main />\n    </HashRouter>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}